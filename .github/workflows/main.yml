name: Black Widow Users CI/CD
on:
  - push
  - pull_request

env:
  IMAGE_TAG: ${{ secrets.CONTAINER_REGISTRY }}:${{ github.sha }}


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Login to Dockerhub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build and tag image
        run: docker build -t ${{ env.IMAGE_TAG }} .

      - name: Push image to container registry
        run: docker push ${{ env.IMAGE_TAG }}

      - name: Check code formatting
        run: docker run --rm -t ${{ env.IMAGE_TAG }} bash -c "isort . --check && black . --check"

      - name: Static code analysis
        run: docker run --rm -t ${{ env.IMAGE_TAG }} bash -c "prospector ."

      - name: Run unit tests
        run: docker run --rm -e "SECRET_KEY={{ secrets.SECRET_KEY }}" -e "AWS_ACCESS_KEY={{ secrets.AWS_ACCESS_KEY }}" -e "AWS_SECRET_KEY={{ secrets.AWS_SECRET_KEY }}" -e "DYNAMODB_TABLE_NAME={{ secrets.DYNAMODB_TABLE_NAME }}" -t ${{ env.IMAGE_TAG }} bash -c "pytest tests/unit/"

      - name: Run integration tests
        run: docker run --rm -e "SECRET_KEY={{ secrets.SECRET_KEY }}" -e "AWS_ACCESS_KEY={{ secrets.AWS_ACCESS_KEY }}" -e "AWS_SECRET_KEY={{ secrets.AWS_SECRET_KEY }}" -e "DYNAMODB_TABLE_NAME={{ secrets.DYNAMODB_TABLE_NAME }}" -t ${{ env.IMAGE_TAG }} bash -c "pytest tests/integration/"

#      - name: Deploy to AWS
#        run: >
#          docker run --rm -e SECRET_KEY={{ secrets.SECRET_KEY }} -e AWS_ACCESS_KEY={{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_KEY={{ secrets.AWS_SECRET_KEY }} -e DYNAMODB_TABLE_NAME={{ secrets.DYNAMODB_TABLE_NAME }} -t ${{ env.IMAGE_TAG }} bash -c "
#            python scripts/prepare_config.py --config_file .chalice/config.template.json \
#          --output_file .chalice/config.json --iam_role_arn {{ secrets.LAMBDA_ROLE_ARN}} \
#          --env_variables=secret_key={{ secrets.SECRET_KEY }},aws_access_key={{ secrets.AWS_ACCESS_KEY }},aws_secret_key={{ secrets.AWS_SECRET_KEY }},table_name={{ secrets.DYNAMODB_TABLE_NAME }};
#
#          poetry export -f requirements.txt --output requirements.txt --without-hashes;
#          mkdir -p ~/.aws && printf '[default]\naws_access_key_id={{ secrets.AWS_ACCESS_KEY }\naws_secret_access_key={{ secrets.AWS_SECRET_KEY }}\nregion=eu-central-1';
#          chalice deploy"
